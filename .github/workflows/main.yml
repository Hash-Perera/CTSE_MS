# name: Deploy to AWS ECS

# on:
#   push:
#     branches: [main]

# jobs:
#   deploy:
#     name: Build & Deploy to ECS
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v3

#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ secrets.AWS_REGION }}

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v2

#       - name: Build, Tag & Push Docker Image
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           IMAGE_TAG: latest
#         run: |
#           docker build -t $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG .
#           docker push $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG

#       - name: Deploy to ECS
#         uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#         with:
#           service: ${{ secrets.ECS_SERVICE }}
#           cluster: ${{ secrets.ECS_CLUSTER }}
#           image: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:latest

#######################################################################################################
# name: Deploy to AWS ECS

# on:
#   push:
#     branches: [main]

# jobs:
#   deploy:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ secrets.AWS_REGION }}

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v2

#       - name: Build, Tag & Push Docker Image
#         id: build-image
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           IMAGE_TAG: latest
#         run: |
#           IMAGE_URI=$ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG
#           echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
#           docker build -t $IMAGE_URI .
#           docker push $IMAGE_URI

#       - name: Prepare task-definition.json
#         run: |
#           export IMAGE_URI=${{ env.IMAGE_URI }}
#           export MONGO_URI=${{ secrets.MONGO_URI }}
#           export JWT_SECRET=${{ secrets.JWT_SECRET }}
#           export JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN }}
#           export EXECUTION_ROLE_ARN=${{ secrets.EXECUTION_ROLE_ARN }}
#           export AWS_REGION=${{ secrets.AWS_REGION }}

#           envsubst < task-definition.template.json > task-definition.json

#       - name: Render ECS Task Definition
#         id: render-task
#         uses: aws-actions/amazon-ecs-render-task-definition@v1
#         with:
#           task-definition: task-definition.json
#           container-name: auth-container
#           image: ${{ env.IMAGE_URI }}

#       - name: Deploy ECS Service
#         uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#         with:
#           task-definition: ${{ steps.render-task.outputs.task-definition }}
#           service: ${{ secrets.ECS_SERVICE }}
#           cluster: ${{ secrets.ECS_CLUSTER }}

#######################################################################################################

name: Build and Deploy BackendApp to ECS

on:
  push:
    branches: [main]

env:
  # Setting an environment variable with the value of a configuration variable
  ECR_BACKEND_IMAGE: ${{ vars.ECR_BACKEND_IMAGE }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
  ECS_BACKEND_SERVICE: ${{ secrets.ECS_SERVICE }}
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up QEMU for arm64
        run: |
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
        if: runner.os == 'Linux'

      - name: Set up Docker for arm64
        uses: docker/setup-qemu-action@v2
        with:
          platforms: linux/arm64

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com

      - name: Build and push Docker image
        run: |
          cd backend
          docker buildx create --use
          docker buildx inspect --bootstrap
          docker buildx build --platform linux/arm64 -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/$ECR_BACKEND_IMAGE:latest --push .

      - name: Deploy to ECS
        uses: imehedi/actions-awscli-v2@latest
        with:
          args: ecs update-service --cluster CTSEProductionCluster --service auth-service --force-new-deployment
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "us-east-1"
